cmake_minimum_required(VERSION 3.10)
include(ExternalProject)

project(QORender 0.0.1)

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Release")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O3")
elseif(CMAKE_BUILD_TYPE STREQUAL "ReleWithDebInfo")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2 -g")
elseif(CMAKE_BUILD_TYPE STREQUAL "Debug")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O0 -g")
elseif(CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Os -DNDEBUG")
else()
    message(FATAL_ERROR "Unknown build type: ${CMAKE_BUILD_TYPE}")
endif()

if(CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(QOR_STATIC_LIBRARY_EXTENSION ".lib")
elseif(CMAKE_SYSTEM_NAME MATCHES "Linux" OR CMAKE_SYSTEM_NAME MATCHES "Darwin")
    set(QOR_STATIC_LIBRARY_EXTENSION ".a")
endif()

if(NOT DEFINED QOR_TARGET_ARCH)
    if(CMAKE_SYSTEM_PROCESSOR MATCHES "x86_64")
        set(QOR_TARGET_ARCH "x86_64")
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "i686")
        set(QOR_TARGET_ARCH "x86_32")
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "aarch64")
        set(QOR_TARGET_ARCH "arm64")
    elseif(CMAKE_SYSTEM_PROCESSOR MATCHES "arm32")
        set(QOR_TARGET_ARCH "arm32")
    else()
        message(FATAL_ERROR "Unsupported target architecture: ${CMAKE_SYSTEM_PROCESSOR}")
    endif()
endif()

set(QOR_DEFAULT_SIMD_FLAGS "native")
if(NOT DEFINED QOR_SIMD_FLAGS)
    set(QOR_SIMD_FLAGS ${QOR_DEFAULT_SIMD_FLAGS})
endif()

set(QOR_FFMPEG_DISABLE_SIMDS "")

message(STATUS "Using SIMD flags: ${SIMD_FLAGS}")

if(QOR_TARGET_ARCH MATCHES "x86")
    foreach(flag IN LIST QOR_SIMD_FLAGS)
        if(CMAKE_CXX_COMPILER_ID MATCHES "Clang|GNU")
            if(flag MATCHES "native")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -march=native")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native")
            endif()
            if(flag MATCHES "avx512icl")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx512icl")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512icl")
            endif()
            if(flag MATCHES "avx512f")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx512f")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512f")
            endif()
            if(flag MATCHES "avx512cd")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx512cd")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512cd")
            endif()
            if(flag MATCHES "avx512er") 
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx512er")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512er")
            endif()
            if(flag MATCHES "avx512pf")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx512pf")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512pf")
            endif()
            if(flag MATCHES "avx512dq")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx512dq")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512dq")
            endif()
            if(flag MATCHES "avx512bw")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx512bw")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512bw")
            endif()
            if(flag MATCHES "avx512vl")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx512vl")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512vl")
            endif()
            if(flag MATCHES "avx512fp16")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx512fp16")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx512fp16")
            endif()
            if(flag MATCHES "avx2")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx2")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx2")
                endif()
            if(flag MATCHES "avx")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx")
                endif()
            if(flag MATCHES "avx10.1")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mavx10.1")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mavx10.1")
            endif()
            if(flag MATCHES "sse4.2")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse4.2")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.2")
            endif()
            if(flag MATCHES "sse4.1")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse4.1")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse4.1")
            endif()
            if(flag MATCHES "sse3")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse3")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse3")
            endif()
            if(flag MATCHES "ssse3")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mssse3")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mssse3")
            endif()
            if(flag MATCHES "sse2")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse2")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse2")
            endif()
            if(flag MATCHES "sse")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -msse")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -msse")
            endif()
            if(flag MATCHES "mmx")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mmmx")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mmmx")
            endif()
            if(flag MATCHES "pclmuldq")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mpclmuldq")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mpclmuldq")
            endif()
            if(flag MATCHES "fma")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfma")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfma")
            endif()
            if(flag MATCHES "fma4")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfma4")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfma4")
            endif()
        elseif(MSVC)
            if(flag MATCHES "avx512")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:AVX512")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX512")
            endif()
            if(flag MATCHES "avx2")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:AVX2")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX2")
            endif()
            if(flag MATCHES "avx")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:AVX")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX")
            endif()
            if(flag MATCHES "avx10.1")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:AVX10.1")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:AVX10.1")
            endif()
            if(flag MATCHES "sse4.2")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:SSE4.2")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE4.2")
            endif()
            if(flag MATCHES "sse4.1")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:SSE4.1")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE4.1")
            endif()
            if(flag MATCHES "sse3")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:SSE3")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE3")
            endif()
            if(flag MATCHES "ssse3")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:SSSE3")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSSE3")
            endif()
            if(flag MATCHES "sse2")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:SSE2")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE2")
            endif()
            if(flag MATCHES "sse")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:SSE")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:SSE")
            endif()
            if(flag MATCHES "mmx")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:MMX")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:MMX")
            endif()
            if(flag MATCHES "pclmuldq")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /arch:PCLMUL")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /arch:PCLMUL")
            endif()
        endif()
    endforeach()
elseif(QOR_TARGET_ARCH MATCHES "arm")
    foreach(flag IN LIST QOR_SIMD_FLAGS)
        if(CMAKE_C_COMPILER_ID MATCHES "GNU" OR CMAKE_C_COMPILER_ID MATCHES "Clang")
            if(flag MATCHES "neon")
                set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -mfpu=neon")
                set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mfpu=neon")
            endif()
        elseif(MSVC)
            if(flag MATCHES "neon")
                message(WARN "MSVC does not fully support NEON")
            endif()
        endif()
    endforeach()
endif()

if(CMAKE_BUILD_TYPE STREQUAL "Release" OR CMAKE_BUILD_TYPE STREQUAL "MinSizeRel")
    set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()

add_executable(QORender source/main.c)

include_directories(dependencies/qozero/include)

# OpenGL/EGL is often contained in the system
find_package(OpenGL EGL REQUIRED)
target_link_libraries(QORender PRIVATE OpenGL::GL EGL)

# Freetype
set(FREETYPE_BUILD_OPTIONS
    -DWITH_ZLIB=OFF
    -DWITH_PNG=OFF
    -DWITH_HARFBUZZ=OFF
    -DWITH_FT2_BUILD=ON
    -DWITH_AUTO_HINTER=ON
    -DWITH_BROTLI=OFF
    -DWITH_GZIP=OFF
    -DFT_ENABLE_AUTOHINT=ON
    -j${CMAKE_PARALLEL_LEVEL}
)

if(CMAKE_C_FLAGS MATCHES "(?i)avx2")
    set(FREETYPE_BUILD_OPTIONS "${FREETYPE_BUILD_OPTIONS} -DFT_ENABLE_AVX2=ON")
endif()
if(CMAKE_C_FLAGS MATCHES "(?i)sse2")
    set(FREETYPE_BUILD_OPTIONS "${FREETYPE_BUILD_OPTIONS} -DFT_ENABLE_SSE2=ON")
endif()
if(CMAKE_C_FLAGS MATCHES "(?i)neon")
    set(FREETYPE_BUILD_OPTIONS "${FREETYPE_BUILD_OPTIONS} -DFT_ENABLE_NEON=ON")
endif()

add_subdirectory(dependencies/freetype)
target_link_libraries(QORender PRIVATE Freetype::Freetype)
target_include_directories(dependencies/freetype/include)

# FFMpeg
if(QOR_TARGET_ARCH MATCHES "x86")
    if(QOR_SIMD_FLAGS NOT MATCHES "avx512icl")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-avx512icl")
    endif()
    if(QOR_SIMD_FLAGS NOT MATCHES "avx512")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-avx512")
    endif()
    if(QOR_SIMD_FLAGS NOT MATCHES "avx2")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-avx2")
    endif()
    if(QOR_SIMD_FLAGS NOT MATCHES "avx")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-avx")
    endif() 
    if(QOR_SIMD_FLAGS NOT MATCHES "sse4.2")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-sse42")
    endif()
    if(QOR_SIMD_FLAGS NOT MATCHES "sse4.1")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-sse41")
    endif()
    if(QOR_SIMD_FLAGS NOT MATCHES "sse3")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-sse3")
    endif()
    if(QOR_SIMD_FLAGS NOT MATCHES "ssse3")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-ssse3")
    endif()
    if(QOR_SIMD_FLAGS NOT MATCHES "sse2")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-sse2")
    endif()
    if(QOR_SIMD_FLAGS NOT MATCHES "sse")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-sse")
    endif()
    if(QOR_SIMD_FLAGS NOT MATCHES "mmx")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-mmx")
    endif()
elseif(QOR_TARGET_ARCH MATCHES "arm")
    if(QOR_SIMD_FLAGS NOT MATCHES "neon")
        set(QOR_FFMPEG_DISABLE_SIMDS "${QOR_FFMPEG_DISABLE_SIMDS} --disable-neon")
    endif()
# Do nothing when specified "native"
endif()

if(NOT DEFINED QOR_REPLACE_X264_WITH_OPENH264)
    set(QOR_SOFTWARE_H264_ENCODER "libx264")
else()
    set(QOR_SOFTWARE_H264_ENCODER "libopenh264")
endif()

if(NOT DEFINED QOR_NO_HARDWARE_H264)
    set(QOR_HARDWARE_H264_ENCODER_ARG \
    " --enable-encoder=h264_qsv --enable-encoder=h264_amf --enable-encoder=h264_nvenc")
else()
    set(QOR_HARDWARE_H264_ENCODER_ARG "") 
endif()

ExternalProject_Add(
    ffmpeg 
    PREFIX ./dependencies/ffmpeg
    CONFIGURE_COMMAND ./configure --prefix=./build/ffmpeg \
        --arch ${QOR_TARGET_ARCH} \
        --disable-all --disable-everything \
        --disable-doc --disable-debug --disable-protocols \
        --disable-muxers \
        --disable-demuxers \
        --enable-filter=colorspace \
        --enable-filter=hwupload \
        --enable-filter=scale \
        --enable-filter=format \
        --enable-pixel-format=yuv444p \
        --enable-pixel-format=yuv420p \
        --enable-pixel-format=rgb24 \
        --enable-pixel-format=rgba \
        --enable-pixel-format=gray8 \
        --enable-encoder=${QOR_SOFTWARE_H264_ENCODER} \
        ${QOR_HARDWARE_H264_ENCODER_ARG} \
        --enable-muxer=mp4 \
        --enable-muxer=mov \
        --enable-protocol=file
    BUILD_COMMAND make -j${CMAKE_PARALLEL_LEVEL}
    INSTALL_COMMAND make install
)

include_directories(build/ffmpeg/include)
link_directories(build/ffmpeg/lib)
add_dependencies(QORender ffmpeg)

file(GLOB_RECURSE FFMPEG_STATIC_LIBS \
    dependencies/ffmpeg/build/ffmpeg/lib/*.${QOR_STATIC_LIBRARY_EXTENSION})

target_link_libraries(QORender PRIVATE ${FFMPPEG_STATIC_LIBS})