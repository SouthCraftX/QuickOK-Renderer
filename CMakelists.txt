cmake_minimum_required(VERSION 3.16)
include(ExternalProject)
include(CMakeParseArguments)
include(FetchContent)
include(CheckIPOSupported)

check_ipo_supported(RESULT IPO_SUPPORTED)

project(QORender VERSION 0.0.1)

option(USE_BUILD_CACHING "Enable ccache/sccache" ON)
option(ALWAYS_ENABLE_LTO "Always enable LTO" OFF)

if (USE_BUILD_CACHING)
    find_program(CCACHE_EXECUTABLE ccache)
    find_program(SCCACHE_EXECUTABLE sccache)
    if (CCACHE_EXECUTABLE)
        message(STATUS "ccache found: ${CCACHE_EXECUTABLE}")
        set(CMAKE_C_COMPILER_LAUNCHER ${CCACHE_EXECUTABLE})
        set(CMAKE_CXX_COMPILER_LAUNCHER ${CCACHE_EXECUTABLE})
    elseif(SCCACHE_EXECUTABLE)
        set(CMAKE_C_COMPILER_LAUNCHER ${SCCACHE_EXECUTABLE})
        set(CMAKE_CXX_COMPILER_LAUNCHER ${SCCACHE_EXECUTABLE})
        message(STATUS "sccache found: ${SCCACHE_EXECUTABLE}")
    else()
        message(FATAL "ccache or sccache not found, but USE_BUILD_CACHING is ON")
    endif()
endif()

set(STAGING_DIR "${CMAKE_BINARY_DIR}/install")
message(STATUS "Superbuild staging directory: ${STAGING_DIR}")

if(NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release)
endif()
message(STATUS "Superbuild using build type: ${CMAKE_BUILD_TYPE}")

set(LTO_CMAKE_FLAG "")
set(LTO_COMPILER_FLAG "")

if(ENABLE_LTO)
    check_ipo_supported(RESULT ipo_supported)
    if(ipo_supported)
        message(STATUS "LTO/IPO is supported, will be enabled for dependencies.")
        set(LTO_CMAKE_FLAG
            "set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE CACHE BOOL \\\"\\\")\\n")
        set(LTO_COMPILER_FLAG "-flto") # <-- 重命名
    else()
        message(
            FATAL
            "LTO/IPO was requested, but is not supported."
        )
    endif()
endif()

# Make toolchain file that prevents make from searching system libararies.
set(TOOLCHAIN_FILE "${CMAKE_BINARY_DIR}/deps.toolchain.cmake")
file(
    WRITE ${TOOLCHAIN_FILE}
    "
# This file is generated by the superbuild. It enforces a sandboxed build.
cmake_minimum_required(VERSION 3.16)\n
set(CMAKE_C_COMPILER \"${CMAKE_C_COMPILER}\")\n
set(CMAKE_CXX_COMPILER \"${CMAKE_CXX_COMPILER}\")\n
set(CMAKE_BUILD_TYPE \"${CMAKE_BUILD_TYPE}\" CACHE STRING \"\")\n
set(CMAKE_INSTALL_PREFIX \"${STAGING_DIR}\" CACHE PATH \"\")\n
set(BUILD_SHARED_LIBS OFF CACHE BOOL \"\")\n
set(CMAKE_POSITION_INDEPENDENT_CODE ON CACHE BOOL \"\")\n
set(CMAKE_FIND_ROOT_PATH \"${STAGING_DIR}\" CACHE PATH \"\" FORCE)\n
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)\n
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)\n
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)\n
")
message(STATUS "Generated dependency toolchain file at: ${TOOLCHAIN_FILE}")
set(EP_DEPS_CMAKE_ARGS -DCMAKE_TOOLCHAIN_FILE=${TOOLCHAIN_FILE})

ExternalProject_Add(
    zlib_ep
    GIT_REPOSITORY https://github.com/madler/zlib.git
    GIT_TAG v1.3.1
    GIT_SHALLOW 1
    CMAKE_ARGS ${EP_DEPS_CMAKE_ARGS} -DZLIB_BUILD_EXAMPLES=OFF
)

ExternalProject_Add(
    png_ep
    GIT_REPOSITORY https://github.com/glennrp/libpng.git
    GIT_TAG v1.6.49
    GIT_SHALLOW 1
    CMAKE_ARGS ${EP_DEPS_CMAKE_ARGS} -DPNG_TESTS=OFF -DPNG_TOOLS=OFF
               -DPNG_SHARED=OFF -DPNG_STATIC=ON
    DEPENDS zlib_ep
)

ExternalProject_Add(
    brotli_ep
    GIT_REPOSITORY https://github.com/google/brotli.git
    GIT_TAG v1.1.0
    GIT_SHALLOW 1
    CMAKE_ARGS ${EP_DEPS_CMAKE_ARGS} -DBUILD_SHARED_LIBS=OFF
               -DBROTLI_DISABLE_TESTS=ON
)

ExternalProject_Add(
    freetype_ep
    GIT_REPOSITORY https://gitlab.freedesktop.org/freetype/freetype.git
    GIT_TAG VER-2-13-3
    GIT_SHALLOW 1
    CMAKE_ARGS ${EP_DEPS_CMAKE_ARGS}
               -DWITH_ZLIB=ON
               -DWITH_PNG=ON
               -DWITH_BZIP2=OFF
               -DWITH_BROTLI=ON
               -DWITH_HARFBUZZ=OFF
               -DBUILD_SHARED_LIBS=OFF
    GIT_SUBMODULES ""
    DEPENDS zlib_ep png_ep brotli_ep
)

ExternalProject_Add(
    harfbuzz_ep
    GIT_REPOSITORY https://github.com/harfbuzz/harfbuzz.git
    GIT_TAG 11.2.1
    GIT_SHALLOW 1
    CMAKE_ARGS ${EP_DEPS_CMAKE_ARGS} -DHB_HAVE_FREETYPE=ON -DHB_HAVE_GRAPHITE2=OFF
               -DBUILD_SHARED_LIBS=OFF -DHB_BUILD_UTILS=OFF
    DEPENDS freetype_ep
)

ExternalProject_Add(
    xxhash_ep
    GIT_REPOSITORY https://github.com/Cyan4973/xxHash.git
    GIT_TAG v0.8.3
    GIT_SHALLOW 1
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ${CMAKE_MAKE_PROGRAM} libxxhash.a
                  "CFLAGS=${CMAKE_C_FLAGS} -fPIC"
    INSTALL_COMMAND
        ${CMAKE_COMMAND} -E make_directory ${STAGING_DIR}/lib && ${CMAKE_COMMAND} -E
        make_directory ${STAGING_DIR}/include && ${CMAKE_COMMAND} -E copy
        <SOURCE_DIR>/libxxhash.a ${STAGING_DIR}/lib/libxxhash.a && ${CMAKE_COMMAND}
        -E copy <SOURCE_DIR>/xxhash.h ${STAGING_DIR}/include/xxhash.h &&
        ${CMAKE_COMMAND} -E copy <SOURCE_DIR>/xxh3.h ${STAGING_DIR}/include/xxh3.h
    BUILD_IN_SOURCE 1
)

ExternalProject_Add(
    xz_ep
    GIT_REPOSITORY https://github.com/tukaani-project/xz.git
    GIT_TAG v5.6.2
    GIT_SHALLOW 1
    CMAKE_ARGS  ${EP_DEPS_CMAKE_ARGS}
                -DBUILD_TESTING=OFF
                -DBUILD_SHARED_LIBS=OFF
                -DBUILD_XZ=OFF
                -DBUILD_XZDEC=OFF
                -DBUILD_LZMADEC=OFF
                -DBUILD_LZMAINFO=OFF
                -DBUILD_SCRIPTS=OFF
)

ExternalProject_Add(
    zstd_ep
    GIT_REPOSITORY https://github.com/facebook/zstd.git
    GIT_TAG v1.5.7
    GIT_SHALLOW 1
    SOURCE_SUBDIR build/cmake
    CMAKE_ARGS ${EP_DEPS_CMAKE_ARGS} -DZSTD_BUILD_PROGRAMS=OFF
                -DZSTD_BUILD_TESTS=OFF -DZSTD_BUILD_SHARED=OFF
                -DZSTD_BUILD_STATIC=ON
)

ExternalProject_Add(
    libarchive_ep
    GIT_REPOSITORY https://github.com/libarchive/libarchive.git
    GIT_TAG v3.7.4
    GIT_SHALLOW 1
    CMAKE_ARGS  ${EP_DEPS_CMAKE_ARGS}
                -DCMAKE_POLICY_VERSION_MINIMUM=3.5
                -DBUILD_SHARED_LIBS=OFF
                -DENABLE_TEST=OFF
                -DENABLE_BSDCPIO=OFF
                -DENABLE_BSDTAR=OFF
                -DENABLE_CAT=OFF
                -DENABLE_TAR=OFF
                -DENABLE_XATTR=OFF
                -DENABLE_ACL=OFF
                -DENABLE_ICONV=OFF
                -DENABLE_7ZIP=ON
                -DENABLE_RAR=ON
                -DENABLE_RAR5=ON
                -DENABLE_ZIP=ON
                -DENABLE_ZLIB=ON
                -DENABLE_XZ=ON
                -DENABLE_ZSTD=ON
    DEPENDS zlib_ep xz_ep zstd_ep
)

set(REAL_BASH_EXECUTABLE
      "C:/tools/msys64/usr/bin/bash.exe"
      CACHE FILEPATH "Path to the MSYS2 bash executable")
if(NOT EXISTS ${REAL_BASH_EXECUTABLE})
    message(
      FATAL_ERROR
        "REAL_BASH_EXECUTABLE not found at ${REAL_BASH_EXECUTABLE}. Please set the correct path."
    )
endif()

ExternalProject_Add(
    icu_ep
    URL "https://github.com/unicode-org/icu/releases/download/release-77-1/icu4c-77_1-src.tgz"
    URL_HASH
      SHA256=588e431f77327c39031ffbb8843c0e3bc122c211374485fa87dc5f3faff24061
    PATCH_COMMAND ${REAL_BASH_EXECUTABLE} -c
                  "cd source/config && cp mh-mingw64 mh-unknown"
    SOURCE_SUBDIR source
    BUILD_IN_SOURCE 1
    CONFIGURE_COMMAND
      ${REAL_BASH_EXECUTABLE} -c
      "CC='${CMAKE_C_COMPILER}' CXX='${CMAKE_CXX_COMPILER}' CFLAGS='${CMAKE_C_FLAGS} -DU_CHARSET_IS_UTF8=1' CXXFLAGS='${CMAKE_CXX_FLAGS} -DU_CHARSET_IS_UTF8=1' ./configure --prefix=${STAGING_DIR} --enable-static --disable-shared --disable-samples --disable-tests --disable-tools --disable-extras --with-data-packaging=library --disable-renaming"
    BUILD_COMMAND make
    INSTALL_COMMAND make install
)

ExternalProject_Add(
    cglm_ep
    GIT_REPOSITORY https://github.com/recp/cglm.git
    GIT_TAG v0.9.6
    GIT_SHALLOW 1
    CMAKE_ARGS ${EP_DEPS_CMAKE_ARGS} -DCGLM_SHARED=OFF -DCGLM_STATIC=ON
               -DCGLM_USE_TEST=OFF
)

ExternalProject_Add(
    yyjson_ep
    GIT_REPOSITORY https://github.com/ibireme/yyjson.git
    GIT_TAG 0.11.1
    GIT_SHALLOW 1
    CMAKE_ARGS ${EP_DEPS_CMAKE_ARGS} -DYYJSON_BUILD_TESTS=OFF
)

ExternalProject_Add(
    sqlite_download
    URL https://www.sqlite.org/2025/sqlite-amalgamation-3500100.zip
        DOWNLOAD_EXTRACT_TIMESTAMP true
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
)

ExternalProject_Add(
    vma_download
    GIT_REPOSITORY
        https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git
    GIT_TAG v3.3.0
    GIT_SHALLOW 1
    CONFIGURE_COMMAND ""
    BUILD_COMMAND ""
    INSTALL_COMMAND ""
)

ExternalProject_Add(
    libQuickOK_Engine
    DEPENDS harfbuzz_ep libarchive_ep yyjson_ep cglm_ep icu_cp

    SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/core
    BINARY_DIR ${CMAKE_BINARY_DIR}/libQuickOK_Engine-build
    
    CMAKE_ARGS 
        -DCMAKE_INSTALL_PREFIX=${EP_INSTALL_PREFIX}
        -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}
        -DCMAKE_PREFIX_PATH=${EP_INSTALL_PREFIX}
)