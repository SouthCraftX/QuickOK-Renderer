#version 450

/**
 * @file rgba_to_nv12.comp
 * @brief 极致优化的计算着色器，将RGBA8图像转换为NV12格式。
 *
 * 核心策略:
 * 1. 瓦片化 (Tiling): 使用带1像素光环的共享内存，确保UV下采样的邻域访问高效且准确。
 * 2. 最小化线程发散: 将分支限制在规律的、必要的场景（光环加载、UV计算线程选择）。
 * 3. 向量化: 尽可能使用vec3/vec2处理颜色和坐标，符合GPU架构。
 * 4. 内存访问优化: 先将数据从全局内存批量加载到共享内存，后续计算均在快速的片上内存中进行。
 * 5. 高效计算: 使用点积进行颜色转换，位运算进行坐标计算。
 */

// 工作组大小: 16x8=128 线程，一个在桌面级GPU上性能和占用率之间很好的平衡点。
layout (local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

// 绑定0: 输入的RGBA8图像
layout (binding = 0, rgba8) uniform readonly image2D u_input_rgba;
// 绑定1: 输出的Y平面 (NV12的亮度部分)，格式为 r8
layout (binding = 1, r8) uniform writeonly image2D u_output_y;
// 绑定2: 输出的UV交错平面 (NV12的色度部分)，格式为 rg8
layout (binding = 2, rg8) uniform writeonly image2D u_output_uv;

// ITU-R BT.709 (HDTV) 标准的转换矩阵行向量，声明为const以帮助编译器优化。
const vec3 C_RGB_TO_Y = vec3(0.2126,  0.7152,  0.0722);
const vec3 C_RGB_TO_U = vec3(-0.1146, -0.3854,  0.5000);
const vec3 C_RGB_TO_V = vec3(0.5000, -0.4542, -0.0458);

// 共享内存: 缓存原始RGB数据。这是最直接、最能避免数据依赖的瓦片化策略。
// 尺寸为 (16+1) x (8+1) 以存储核心块和1像素的光环。
shared vec3 s_rgb_cache[9][17]; // [y][x] 布局

void main() {
    // ---- 1. 初始化与坐标计算 ----
    ivec2 global_coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 local_coord  = ivec2(gl_LocalInvocationID.xy);
    ivec2 image_size   = imageSize(u_input_rgba);

    // ---- 2. 协同加载数据到共享内存 (瓦片化核心步骤) ----
    
    // a) 每个线程加载其对应的主像素
    //    在加载前进行边界检查，对图像外的像素，我们用vec3(0.0)（黑色）填充，
    //    这样可以保证共享内存中的数据总是有效的，简化后续计算。
    if (global_coord.x < image_size.x && global_coord.y < image_size.y) {
        s_rgb_cache[local_coord.y][local_coord.x] = imageLoad(u_input_rgba, global_coord).rgb;
    } else {
        s_rgb_cache[local_coord.y][local_coord.x] = vec3(0.0);
    }

    // b) 边界线程加载光环数据，以支持UV下采样
    //    这些if分支只会由工作组边缘的线程执行，将线程发散的影响降到最低。
    //    右侧光环 (由最右一列线程加载)
    if (local_coord.x == 15) {
        ivec2 halo_coord = global_coord + ivec2(1, 0);
        if (halo_coord.x < image_size.x && halo_coord.y < image_size.y) {
            s_rgb_cache[local_coord.y][16] = imageLoad(u_input_rgba, halo_coord).rgb;
        } else {
            s_rgb_cache[local_coord.y][16] = vec3(0.0);
        }
    }
    //    底部光环 (由最下一行线程加载)
    if (local_coord.y == 7) {
        ivec2 halo_coord = global_coord + ivec2(0, 1);
        if (halo_coord.x < image_size.x && halo_coord.y < image_size.y) {
            s_rgb_cache[8][local_coord.x] = imageLoad(u_input_rgba, halo_coord).rgb;
        } else {
            s_rgb_cache[8][local_coord.x] = vec3(0.0);
        }
    }
    //    右下角光环 (由右下角那个线程加载)
    if (local_coord.x == 15 && local_coord.y == 7) {
        ivec2 halo_coord = global_coord + ivec2(1, 1);
        if (halo_coord.x < image_size.x && halo_coord.y < image_size.y) {
            s_rgb_cache[8][16] = imageLoad(u_input_rgba, halo_coord).rgb;
        } else {
            s_rgb_cache[8][16] = vec3(0.0);
        }
    }
    
    // ---- 3. 同步工作组 ----
    //    这是一个内存屏障，确保所有线程都完成了对共享内存的写入，
    //    然后才能安全地从中读取数据进行计算。
    barrier();

    // ---- 4. 计算并写出Y平面 (全分辨率) ----
    //    每个线程从快速的共享内存中读取自己的RGB值，执行一次点积运算得到Y值，
    //    并立即写出到Y平面。此部分无分支，所有线程并行执行。
    vec3 my_rgb = s_rgb_cache[local_coord.y][local_coord.x];
    // 只有在图像范围内的线程才需要写出，避免在图像外写入。
    if (global_coord.x < image_size.x && global_coord.y < image_size.y) {
        imageStore(u_output_y, global_coord, vec4(dot(my_rgb, C_RGB_TO_Y), 0.0, 0.0, 1.0));
    }

    // ---- 5. 计算并写出UV平面 (半分辨率，交错存储) ----
    //    只有2x2像素块的左上角线程（局部坐标x和y均为偶数）需要执行此操作。
    //    这种规则的线程发散对GPU是友好的。
    if ((local_coord.x & 1) == 0 && (local_coord.y & 1) == 0) {
        // 同样，只有当这个2x2块的左上角在图像内时，才进行计算和写出。
        if (global_coord.x < image_size.x && global_coord.y < image_size.y) {
            // a) 从共享内存中安全地读取2x2块的RGB值。
            //    由于光环的存在，这里的邻域访问非常快速且无需任何边界检查。
            vec3 rgb00 = s_rgb_cache[local_coord.y    ][local_coord.x    ];
            vec3 rgb10 = s_rgb_cache[local_coord.y    ][local_coord.x + 1];
            vec3 rgb01 = s_rgb_cache[local_coord.y + 1][local_coord.x    ];
            vec3 rgb11 = s_rgb_cache[local_coord.y + 1][local_coord.x + 1];

            // b) 计算平均RGB值，这是高质量色度下采样的标准做法。
            vec3 avg_rgb = (rgb00 + rgb10 + rgb01 + rgb11) * 0.25;

            // c) 计算U和V值，并从[-0.5, 0.5]范围映射到[0, 1]范围。
            //    将UV打包到一个vec2中，准备一次性写入。
            vec2 uv = vec2(dot(avg_rgb, C_RGB_TO_U), dot(avg_rgb, C_RGB_TO_V)) + 0.5;

            // d) 使用位运算计算UV平面的写入坐标 (width/2, height/2)。
            ivec2 uv_coord = global_coord >> 1;

            // e) 将打包好的UV对写入到NV12的色度平面。
            imageStore(u_output_uv, uv_coord, vec4(uv.x, uv.y, 0.0, 1.0));
        }
    }
}