#version 450

// 工作组大小: 16x8=128 线程
layout (local_size_x = 16, local_size_y = 8, local_size_z = 1) in;

// 绑定
layout (binding = 0, rgba8) uniform readonly image2D u_input_rgba;
layout (binding = 1, r8) uniform writeonly image2D u_output_y;
layout (binding = 2, rg8) uniform writeonly image2D u_output_uv;

// 常量
const mat3 C_RGB_TO_YUV = mat3(
    vec3(0.2126,  0.7152,  0.0722),
    vec3(-0.1146, -0.3854,  0.5000),
    vec3(0.5000, -0.4542, -0.0458)
);

// 共享内存: 缓存完整的vec3(RGB)，这是最通用和简单的光环策略。
// 大小为 (16+1) x (8+1) 来存储光环。
shared vec3 s_rgb_cache[9][17]; // [y][x]

void main() {
    // 坐标与尺寸
    ivec2 global_coord = ivec2(gl_GlobalInvocationID.xy);
    ivec2 local_coord  = ivec2(gl_LocalInvocationID.xy);
    ivec2 image_size   = imageSize(u_input_rgba);

    // 1. 协同加载RGB数据到共享内存（包含光环）
    // 每个线程负责加载一个主像素。
    if (global_coord.x < image_size.x && global_coord.y < image_size.y) {
        s_rgb_cache[local_coord.y][local_coord.x] = imageLoad(u_input_rgba, global_coord).rgb;
    } else {
        s_rgb_cache[local_coord.y][local_coord.x] = vec3(0.0); // 图像外的像素置黑
    }

    // 边界线程负责加载光环像素
    // 右侧光环 (由最右列线程加载)
    if (local_coord.x == 15) {
        ivec2 halo_coord = global_coord + ivec2(1, 0);
        if (halo_coord.x < image_size.x && halo_coord.y < image_size.y) {
            s_rgb_cache[local_coord.y][16] = imageLoad(u_input_rgba, halo_coord).rgb;
        } else {
            s_rgb_cache[local_coord.y][16] = vec3(0.0);
        }
    }
    // 底部光环 (由最下行线程加载)
    if (local_coord.y == 7) {
        ivec2 halo_coord = global_coord + ivec2(0, 1);
        if (halo_coord.x < image_size.x && halo_coord.y < image_size.y) {
            s_rgb_cache[8][local_coord.x] = imageLoad(u_input_rgba, halo_coord).rgb;
        } else {
            s_rgb_cache[8][local_coord.x] = vec3(0.0);
        }
    }
    // 右下角光环 (由右下角线程加载)
    if (local_coord.x == 15 && local_coord.y == 7) {
        ivec2 halo_coord = global_coord + ivec2(1, 1);
        if (halo_coord.x < image_size.x && halo_coord.y < image_size.y) {
            s_rgb_cache[8][16] = imageLoad(u_input_rgba, halo_coord).rgb;
        } else {
            s_rgb_cache[8][16] = vec3(0.0);
        }
    }
    
    // 2. 同步，确保所有数据已加载到共享内存
    barrier();

    // 3. 计算与写出Y平面
    // 每个线程从共享内存读取自己的RGB值，转换并写出Y。
    vec3 my_rgb = s_rgb_cache[local_coord.y][local_coord.x];
    imageStore(u_output_y, global_coord, vec4(dot(my_rgb, C_RGB_TO_YUV[0]), 0.0, 0.0, 1.0));

    // 4. 计算与写出UV平面
    // 只有2x2块的左上角线程（局部坐标为偶数）执行。
    if ((local_coord.x & 1) == 0 && (local_coord.y & 1) == 0) {
        // 从共享内存中安全地读取2x2块的RGB值
        vec3 rgb00 = s_rgb_cache[local_coord.y    ][local_coord.x    ];
        vec3 rgb10 = s_rgb_cache[local_coord.y    ][local_coord.x + 1];
        vec3 rgb01 = s_rgb_cache[local_coord.y + 1][local_coord.x    ];
        vec3 rgb11 = s_rgb_cache[local_coord.y + 1][local_coord.x + 1];

        // 平均RGB值
        vec3 avg_rgb = (rgb00 + rgb10 + rgb01 + rgb11) * 0.25;

        // 转换并打包UV
        vec2 uv = vec2(dot(avg_rgb, C_RGB_TO_YUV[1]), dot(avg_rgb, C_RGB_TO_YUV[2])) + 0.5;

        // 写出UV对
        imageStore(u_output_uv, global_coord >> 1, vec4(uv, 0.0, 1.0));
    }
}